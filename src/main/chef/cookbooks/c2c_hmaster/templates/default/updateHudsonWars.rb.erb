#!/usr/bin/ruby

#Script to update the existing hudson wars with the new template. Container should already be stopped
# This is only needed for perOrg hudson multi-tenancy, where we refer to projectId, its really orgId

hudsonBaseDir="<%= node.c2c.hmaster.builds_dir %>/"
hudsonTemplateWar="<%= node.c2c.server.opt %>/configuration/template/hudson-war/hudson.war"
hudsonWebappsDir="<%= node.c2c.server.opt %>/webapps"

hudsonHomeDir="<%= node.c2c.hmaster.builds_dir %>"
configSourceDir="<%= node.c2c.server.opt %>/configuration/template/hudson-home"

removePlugins=<%= node.c2c.hudson.update_plugins %>
updateConfigXml=<%= node.c2c.hudson.update_config %>

if removePlugins
   puts "removing users plugin data"
   `rm -rf #{hudsonBaseDir}/*/plugins/*`
end

puts "removing exploaded webapps"
`rm -rf #{hudsonWebappsDir}/*hudson`

projectIdPattern=/<%= node.c2c.hudson.path %>#(.*)#hudson.war/

Dir.glob("#{hudsonWebappsDir}/*hudson.war") do |webapp|
	
    match = projectIdPattern.match(webapp)
    projectId = match[1]

    puts "Updating webapp #{webapp} with project #{projectId}"

    tempWarLocation="/tmp/hudson-#{projectId}"
    `mkdir #{tempWarLocation}`
    `cp #{hudsonTemplateWar} #{tempWarLocation}`
    `cd #{tempWarLocation} && unzip hudson.war WEB-INF/web.xml`
    
    # Place the hudson home for this project in the web.xml
    `sed "s,<env-entry-value>,<env-entry-value>#{hudsonBaseDir}#{projectId} ," #{tempWarLocation}/WEB-INF/web.xml > #{tempWarLocation}/WEB-INF/web.xml.mod`
    `mv  #{tempWarLocation}/WEB-INF/web.xml.mod  #{tempWarLocation}/WEB-INF/web.xml`
    `cd #{tempWarLocation} && zip hudson.war WEB-INF/web.xml`
    `mv #{tempWarLocation}/hudson.war #{webapp}`
    `chown <%= node.tomcat.user %>:<%= node.tomcat.user %> #{webapp}` 
    `rm -rf #{tempWarLocation}`
    
    if updateConfigXml
    	puts "Migrating base config for #{projectId}" 
	    Dir.glob("#{configSourceDir}/*.xml") do |configFile|
	    	content = File.read(configFile)
			migrated_content = content.gsub("${profile.organization.identifier}", projectId)
			targetConfigFile = "#{hudsonHomeDir}/#{projectId}/#{File.basename(configFile)}"
    	    File.open(targetConfigFile, 'w') {|f| f.write(migrated_content) }
	    end
    end

end


